name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  # Go Backend - Format & Lint & Test
  go-backend:
    name: Go - ${{ matrix.service }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service:
          - auth
          - gateway
          - user
          - product
          - order
          - payment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'
          cache-dependency-path: |
            services/${{ matrix.service }}/go.sum
            proto/go.sum
            pkg/go.sum

      - name: Check Go formatting (gofmt)
        working-directory: services/${{ matrix.service }}
        run: |
          unformatted=$(gofmt -l .)
          if [ -n "$unformatted" ]; then
            echo "L The following files are not formatted:"
            echo "$unformatted"
            echo ""
            echo "Please run: gofmt -w services/${{ matrix.service }}"
            exit 1
          fi
          echo " All Go files are properly formatted"

      - name: Run go vet
        working-directory: services/${{ matrix.service }}
        run: go vet ./...

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          working-directory: services/${{ matrix.service }}
          args: --timeout=5m

      - name: Download dependencies
        working-directory: services/${{ matrix.service }}
        run: go mod download

      - name: Verify dependencies
        working-directory: services/${{ matrix.service }}
        run: go mod verify

      - name: Build service
        working-directory: services/${{ matrix.service }}
        run: |
          if [ -d "cmd/server" ]; then
            echo "Building from cmd/server..."
            go build -v -o server.exe ./cmd/server
          else
            echo "Building from root..."
            go build -v -o server.exe .
          fi
          ls -lh *.exe

      - name: Run unit tests
        working-directory: services/${{ matrix.service }}
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        if: github.event_name == 'pull_request'
        with:
          files: ./services/${{ matrix.service }}/coverage.out
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}
          fail_ci_if_error: false

  # Frontend - Format & Lint & Build & Test
  frontend:
    name: Frontend (Next.js)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: web
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Check Prettier formatting
        run: |
          npm run format:check || {
            echo "L Code is not formatted"
            echo "Please run: cd web && npm run format"
            exit 1
          }
          echo " All files are properly formatted"

      - name: Run ESLint
        run: npm run lint

      - name: TypeScript type check
        run: npx tsc --noEmit

      - name: Run tests
        run: npm test --if-present

      - name: Build production bundle
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8080/api/v1

  # Protocol Buffers validation
  proto:
    name: Protocol Buffers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Install protoc
        run: |
          PROTOC_VERSION=25.1
          wget -q https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOC_VERSION}/protoc-${PROTOC_VERSION}-linux-x86_64.zip
          unzip -q protoc-${PROTOC_VERSION}-linux-x86_64.zip -d $HOME/.local
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install protoc-gen-go plugins
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Generate proto files
        run: bash scripts/generate-proto.sh

      - name: Check for uncommitted proto changes
        run: |
          if [ -n "$(git status --porcelain proto/)" ]; then
            echo "L Proto files have uncommitted changes"
            echo "Please run: bash scripts/generate-proto.sh"
            git diff proto/
            exit 1
          fi
          echo " Proto files are up to date"

  # OpenAPI schema validation
  openapi:
    name: OpenAPI Schema
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install openapi-typescript
        run: npm install -g openapi-typescript

      - name: Validate OpenAPI schema (TypeScript)
        run: |
          openapi-typescript api/openapi/user.yaml --output /tmp/user.ts
          echo " OpenAPI schema is valid for TypeScript generation"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Install oapi-codegen
        run: go install github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen@latest

      - name: Generate OpenAPI Go code
        run: bash scripts/generate-go.sh

      - name: Check for uncommitted OpenAPI changes
        run: |
          if [ -n "$(git status --porcelain services/gateway/internal/api/)" ]; then
            echo "L OpenAPI generated files have uncommitted changes"
            echo "Please run: npm run codegen:go"
            git diff services/gateway/internal/api/
            exit 1
          fi
          echo " OpenAPI generated files are up to date"

  # Bazel build test (experimental - allowed to fail)
  bazel:
    name: Bazel Build (experimental)
    runs-on: ubuntu-latest
    continue-on-error: true  # 1WWfï¿½CIoï¿½
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bazelisk
        uses: bazelbuild/setup-bazelisk@v3

      - name: Mount bazel cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/bazel
          key: ${{ runner.os }}-bazel-${{ hashFiles('.bazelversion', 'WORKSPACE', 'MODULE.bazel', 'MODULE.bazel.lock') }}
          restore-keys: |
            ${{ runner.os }}-bazel-

      - name: Test Bazel configuration
        run: |
          echo "Testing Bazel build..."
          bazel version

          # Try to build a simple target
          bazel build //proto/... || {
            echo "ï¿½  Bazel build failed (expected - configuration WIP)"
            echo "See BAZEL-BUILD-INSTRUCTIONS.md for current status"
            exit 0
          }

          echo " Bazel build succeeded!"

  # Summary job - ï¿½ï¿½ï¿½ï¿½nï¿½ï¿½Ã¯
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs:
      - go-backend
      - frontend
      - proto
      - openapi
      # bazel o+ï¿½jDexperimental	
    if: always()
    steps:
      - name: Check all required jobs
        run: |
          echo "Checking CI results..."
          echo "go-backend: ${{ needs.go-backend.result }}"
          echo "frontend: ${{ needs.frontend.result }}"
          echo "proto: ${{ needs.proto.result }}"
          echo "openapi: ${{ needs.openapi.result }}"

          if [ "${{ needs.go-backend.result }}" != "success" ] || \
             [ "${{ needs.frontend.result }}" != "success" ] || \
             [ "${{ needs.proto.result }}" != "success" ] || \
             [ "${{ needs.openapi.result }}" != "success" ]; then
            echo "L Some CI jobs failed"
            exit 1
          fi
          echo " All required CI jobs passed successfully!"
